From 6dedeb40db13971af45276f80b5375030aa7e76f Mon Sep 17 00:00:00 2001
From: Stanislav Malyshev <stas@php.net>
Date: Sat, 4 Jul 2015 23:47:48 -0700
Subject: [PATCH] Fix bug #69923 - Buffer overflow and stack smashing error in
 phar_fix_filepath

---
 ext/phar/phar.c |   10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

--- a/ext/phar/phar.c
+++ b/ext/phar/phar.c
@@ -2148,7 +2148,7 @@ char *tsrm_strtok_r(char *s, const char
  */
 char *phar_fix_filepath(char *path, int *new_len, int use_cwd TSRMLS_DC) /* {{{ */
 {
-	char newpath[MAXPATHLEN];
+	char *newpath;
 	int newpath_len;
 	char *ptr;
 	char *tok;
@@ -2156,8 +2156,10 @@ char *phar_fix_filepath(char *path, int
 
 	if (PHAR_G(cwd_len) && use_cwd && path_length > 2 && path[0] == '.' && path[1] == '/') {
 		newpath_len = PHAR_G(cwd_len);
+		newpath = emalloc(strlen(path) + newpath_len + 1);
 		memcpy(newpath, PHAR_G(cwd), newpath_len);
 	} else {
+		newpath = emalloc(strlen(path) + 2);
 		newpath[0] = '/';
 		newpath_len = 1;
 	}
@@ -2180,6 +2182,7 @@ char *phar_fix_filepath(char *path, int
 				if (*tok == '.') {
 					efree(path);
 					*new_len = 1;
+					efree(newpath);
 					return estrndup("/", 1);
 				}
 				break;
@@ -2187,9 +2190,11 @@ char *phar_fix_filepath(char *path, int
 				if (tok[0] == '.' && tok[1] == '.') {
 					efree(path);
 					*new_len = 1;
+					efree(newpath);
 					return estrndup("/", 1);
 				}
 		}
+		efree(newpath);
 		return path;
 	}
 
@@ -2238,7 +2243,8 @@ last_time:
 
 	efree(path);
 	*new_len = newpath_len;
-	return estrndup(newpath, newpath_len);
+	newpath[newpath_len] = '\0';
+	return erealloc(newpath, newpath_len + 1);
 }
 /* }}} */
 
