From: Nikita Popov <nikic@php.net>
Date: Wed, 7 Dec 2016 23:12:13 +0100
Subject: Fix propagation of QM_ASSIGN into VERIFY_RETURN_TYPE

VERIFY_RETURN_TYPE uses different formats for the CONST/non-CONST
cases. If we progate a CONST operand into op1, op1 should be
moved to result.
---
 ext/opcache/Optimizer/block_pass.c | 22 ++++++++++++++--------
 1 file changed, 14 insertions(+), 8 deletions(-)

diff --git a/ext/opcache/Optimizer/block_pass.c b/ext/opcache/Optimizer/block_pass.c
index 77b02cc..85d6c5c 100644
--- a/ext/opcache/Optimizer/block_pass.c
+++ b/ext/opcache/Optimizer/block_pass.c
@@ -157,17 +157,23 @@ static void zend_optimize_block(zend_basic_block *block, zend_op_array *op_array
 			src = VAR_SOURCE(opline->op1);
 			if (src &&
 			    src->opcode == ZEND_QM_ASSIGN &&
-			    src->op1_type == IS_CONST) {
-
+			    src->op1_type == IS_CONST
+			) {
 				znode_op op1 = opline->op1;
-				zval c = ZEND_OP1_LITERAL(src);
-
-				zval_copy_ctor(&c);
-				if (zend_optimizer_update_op1_const(op_array, opline, &c)) {
-					zend_optimizer_remove_live_range(op_array, op1.var);
+				if (opline->opcode == ZEND_VERIFY_RETURN_TYPE) {
+					COPY_NODE(opline->result, opline->op1);
+					COPY_NODE(opline->op1, src->op1);
 					VAR_SOURCE(op1) = NULL;
-					literal_dtor(&ZEND_OP1_LITERAL(src));
 					MAKE_NOP(src);
+				} else {
+					zval c = ZEND_OP1_LITERAL(src);
+					zval_copy_ctor(&c);
+					if (zend_optimizer_update_op1_const(op_array, opline, &c)) {
+						zend_optimizer_remove_live_range(op_array, op1.var);
+						VAR_SOURCE(op1) = NULL;
+						literal_dtor(&ZEND_OP1_LITERAL(src));
+						MAKE_NOP(src);
+					}
 				}
 			}
 		}
